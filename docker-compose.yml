version: '3.3'
services:
  web:
    restart: always
    image: prototype2:${VERSION}
    build: .
    pull_policy: build
    environment:
      - DOCKER_BUILDKIT=0
      - CONFIG_DEBUG=${CONFIG_DEBUG}
      - CONFIG_SECRET_KEY=${CONFIG_SECRET_KEY}
      - CONFIG_ALLOWED_HOSTS=${CONFIG_ALLOWED_HOSTS}
      - CONFIG_CSRF_TRUSTED_ORIGINS=${CONFIG_CSRF_TRUSTED_ORIGINS}
      - CONFIG_POSTGRESQL_NAME=${CONFIG_POSTGRESQL_NAME}
      - CONFIG_POSTGRESQL_USER=${CONFIG_POSTGRESQL_USER}
      - CONFIG_POSTGRESQL_PASSWORD=${CONFIG_POSTGRESQL_PASSWORD}
      - CONFIG_POSTGRESQL_HOST=${CONFIG_POSTGRESQL_HOST}
      - CONFIG_POSTGRESQL_PORT=${CONFIG_POSTGRESQL_PORT}
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --config gunicorn-cfg.py core.wsgi"
    volumes:
      - static:/static 
      - media:/media
      - nginx:/nginx
    depends_on:
      - redis
      - postgres
  nginx:
    restart: always
    image: nginx:latest
    ports:
      - ${PORT}:80
    volumes:
      - nginx:/etc/nginx/conf.d
      - static:/static
      - media:/media
    depends_on: 
      - web
  redis:
    restart: always
    image: redis
    volumes:
      - redis:/data
  postgres:
    image: postgres
    volumes:
      - postgres:/var/lib/postgresql/data/
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"
volumes:
  static:
  media:
  redis:
  postgres:
  nginx: